import cv2
import mediapipe as mp
import numpy as np

# Initialize MediaPipe Holistic
mp_holistic = mp.solutions.holistic

# Settings
overlay_enabled = True
drop_rate = 0  # Number of frames to skip after each processed frame
frame_counter = 0

def draw_landmarks(image, results):
    mp_drawing = mp.solutions.drawing_utils
    drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=2)
    if results.pose_landmarks:
        mp_drawing.draw_landmarks(
            image, results.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
            landmark_drawing_spec=drawing_spec)
    if results.face_landmarks:
        mp_drawing.draw_landmarks(
            image, results.face_landmarks, mp_holistic.FACEMESH_TESSELATION,
            landmark_drawing_spec=drawing_spec)
    if results.left_hand_landmarks:
        mp_drawing.draw_landmarks(
            image, results.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
            landmark_drawing_spec=drawing_spec)
    if results.right_hand_landmarks:
        mp_drawing.draw_landmarks(
            image, results.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
            landmark_drawing_spec=drawing_spec)

def run_frame_drop_demo():
    global overlay_enabled, drop_rate, frame_counter

    cap = cv2.VideoCapture(0)
    with mp_holistic.Holistic(static_image_mode=False) as holistic:
        results = None
        while cap.isOpened():
            success, frame = cap.read()
            if not success:
                break

            # Skip frames based on drop_rate
            if frame_counter % (drop_rate + 1) == 0:
                image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                results = holistic.process(image_rgb)

            frame_counter += 1
            display_frame = frame.copy()

            if overlay_enabled and results:
                draw_landmarks(display_frame, results)

            cv2.putText(display_frame,
                        f"Drop Rate: {drop_rate} (frames skipped between updates) | +/- to adjust | 'o' toggle | 'q' quit",
                        (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1)
            cv2.imshow("ECV Frame Drops", display_frame)

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
            elif key == ord('o'):
                overlay_enabled = not overlay_enabled
            elif key in (ord('+'), ord('=')):
                drop_rate = min(30, drop_rate + 1)
            elif key in (ord('-'), ord('_')):
                drop_rate = max(0, drop_rate - 1)

    cap.release()
    cv2.destroyAllWindows()

run_frame_drop_demo()

